/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import data.Paciente;
import data.PacienteDAO;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author crist
 */
public class TelaPacienteCadastrado extends javax.swing.JFrame {

    private Paciente paciente;

    /**
     * Creates new form TelaPacienteCadastrado
     */
    public TelaPacienteCadastrado() {
        initComponents();
        this.paciente = paciente;
        this.preencherTela("");
    }

    private void preencherTela(String filtro) {

        PacienteDAO dao = new PacienteDAO();
        boolean status = dao.conectar();

        if (status == false) {
            JOptionPane.showMessageDialog(null, "Erro de conexão");
        } else {
            List<Paciente> listaPacientes = dao.listagem(filtro);

            if (listaPacientes != null && !listaPacientes.isEmpty()) {
                DefaultTableModel tabelaPacientes = (DefaultTableModel) tblPacienteCadastrado.getModel();
                tblPacienteCadastrado.setRowSorter(new TableRowSorter(tabelaPacientes));
                tabelaPacientes.setNumRows(0);

                for (Paciente p : listaPacientes) {
                    Object[] obj = new Object[]{
                        p.getNome(),
                        p.getCpf(),
                        p.getTelefone(),
                        p.getEndereco(),
                        p.getConvenio()
                    };
                    tabelaPacientes.addRow(obj);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Nenhum paciente encontrado.");
            }
            dao.desconectar();
        }
    }

    private Paciente getPacienteSelecionado(int posPaciente) {

        if (posPaciente >= 0) {
            DefaultTableModel model = (DefaultTableModel) tblPacienteCadastrado.getModel();
            String nome = model.getValueAt(posPaciente, 0).toString();

            PacienteDAO dao = new PacienteDAO();
            boolean status = dao.conectar();

            if (status) {
                return dao.consultaPorNome(nome);
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao conectar ao banco de dados.");
                return null;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um paciente.");
            return null;
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPacienteCadastrado = new javax.swing.JTable();
        btnEditar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pacientes Cadastrados");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Pacientes Cadastrados");

        tblPacienteCadastrado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nome", "CPF", "Telefone", "Endereço", "Convênio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblPacienteCadastrado);

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81)
                .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(1, 1, 1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
                    .addGap(2, 2, 2)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 246, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditar)
                    .addComponent(btnExcluir)
                    .addComponent(btnVoltar))
                .addContainerGap())
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(35, 35, 35)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(35, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed

        TelaInicial tela = new TelaInicial();
        tela.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed

        excluirSelectedPaciente();
    }

    private void excluirSelectedPaciente() {

        int selectedRow = tblPacienteCadastrado.getSelectedRow();
        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) tblPacienteCadastrado.getModel();
            int pacienteID = getPacienteID(selectedRow); 

            PacienteDAO dao = new PacienteDAO();
            boolean status = dao.conectar();

            if (status) {
                boolean sucesso = dao.excluirPacientePorID(pacienteID); 

                if (sucesso) {
                    model.removeRow(selectedRow);
                    tblPacienteCadastrado.setModel(model);
                    JOptionPane.showMessageDialog(null, "Paciente excluído com sucesso.");
                } else {
                    JOptionPane.showMessageDialog(null, "Falha ao excluir o paciente.");
                }
                dao.desconectar();
            } else {
                JOptionPane.showMessageDialog(null, "Erro de conexão com o banco de dados.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um paciente para excluir.");
        }
    }

    private int getPacienteID(int selectedRow) {

        DefaultTableModel model = (DefaultTableModel) tblPacienteCadastrado.getModel();
        String nomePaciente = model.getValueAt(selectedRow, 0).toString(); 

        PacienteDAO dao = new PacienteDAO();
        boolean status = dao.conectar();

        if (status) {
            Paciente paciente = dao.consultaPorNome(nomePaciente);
            if (paciente != null) {
                return paciente.getId();
            } else {
                JOptionPane.showMessageDialog(null, "Paciente não encontrado.");
                return -1;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Erro de conexão com o banco de dados.");
            return -1;
        }
    }

    private int getPosicaoPaciente() {
        int posPaciente = tblPacienteCadastrado.getSelectedRow();
        if (posPaciente == -1) {
            JOptionPane.showMessageDialog(rootPane, "Selecione um paciente");
        }
        return posPaciente;
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed

        int selectedRow = tblPacienteCadastrado.getSelectedRow();

        if (selectedRow != -1) {
            Paciente pacienteSelecionado = getPacienteSelecionado(selectedRow);

            if (pacienteSelecionado != null) {
                
                TelaCadastroPaciente tela = new TelaCadastroPaciente(pacienteSelecionado);
                tela.setVisible(true);
                dispose();
            } else {
                JOptionPane.showMessageDialog(rootPane, "Paciente não encontrado");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Selecione um paciente para editar");
        }

    }//GEN-LAST:event_btnEditarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPacienteCadastrado.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPacienteCadastrado.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPacienteCadastrado.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPacienteCadastrado.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPacienteCadastrado().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblPacienteCadastrado;
    // End of variables declaration//GEN-END:variables
}
